Layers:

Physical: Screen and input methods, this is how the players are going to interact with the game.
Client: Some of the rules will be processed locally, such as loading the local player position (probably a problem for collision?).
Server: Determine game rules, controls ball mechanics, collect and distribute data about the other player to present it.

Server Classes:

- class Client
    |_ Screen size
    |_ Screen DPI
    |_ Input method
    |_ Player data

- class Ball
    |_ Ball position
    |_ Ball dominion (player1, playe2 or free)

Client Classes:

- Player
    |_ ID
    |_ Position
    |_ Size
    |_ Points

- Playground
    |_ Size
    |_ Score board
    |_ Remaining time

A. Main Objects and Data Flow

1. System Data, Client to Server direction, System_DT:

    Description: The System_DT is the object containing the player's enviroment settings that are going to determine specific gaming aspects.

    SERVER.System_DT1 = Client1.System_DT;
    SERVER.System_DT2 = Client2.System_DT;

    1.1 Screen resolution                       :: System_DT.res            :: array, [length, height], i.e.: [1920, 1080];
    1.2 Screen DPI                              :: System_DT.DPI            :: int, i.e.: 300;
    1.3 Input method                            :: System_DT.method         :: int, 0: keyboard, 1: controller; 2: touchscreen;

2. Playground Data, Server to Client direction, Playground_DT:

    Description: The Playground refers to the HTML canvas element, where the game will take place.

    2.1 Field size                              :: Playground_DT.size       :: array, [length, height];
    2.2 Controller status                       :: Playground_DT.method     :: int, 0: keyboard, 1: controller; 2: touchscreen;
    2.3 Virtual controller (if touchscreen)     :: Playground_DT.vControl   :: bool, false: disabled, true: enabled;
    2.4 Player2 object                          :: Playground_DT.player2    :: class player;
    2.5 Ball object                             :: Playground_DT.ball       :: class ball;

3. Player Inputs, Player to Client direction, Player_IN:

    Description: The Player_IN are the inputs given by the player to the client.

    3.1 Player’s ID                             :: Player_IN.ID             :: string, "Charles";
    3.2 Movement commands                       :: Player_IN.cmd            :: array, [left, up, right, down, pitch];

4. Client Output, Client to Server direction, Client_OUT:

    Description: These are the important data that must be sent to the server, so it can display in other clients and make calculations.

    4.1 Player’s object                         :: Client_OUT.player1       :: class player;
